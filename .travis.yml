dist: trusty
language: cpp

cache:
  ccache: true
  directories:
    - dependencies
    - build/libs

before_cache:
  - ${TRAVIS_BUILD_DIR}/scripts/cleanup-cmake.sh

env:
  global:
    - MAKEFLAGS="-j 2"

# Create aliases for some of shared build configuration
_basic_env:
- &daily_linux
  if: type = cron
  os: linux
  compiler: gcc
  addons:
    apt:
      sources:
        - ubuntu-toolchain-r-test
      packages:
        - g++-6
        - valgrind
- &linux_base
  if: type != cron AND branch != coverity_scan
  os: linux
  compiler: gcc
- &osx_base
  if: branch != coverity_scan
  os: osx
  compiler: clang

jobs:
  # On weekdays, the backlog for waiting OS X builds is huge
  fast_finish: true
  allow_failures:
    - os: osx

  include:
    - # Coverity static analysis job
      if: branch = coverity_scan
      os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
        coverity_scan:
          project:
            name: "LLNL/GridDyn"
            description: "GridDyn is an open-source power transmission simulation software package"
          notification_email: mast9@llnl.gov
          build_command_prepend: cmake .. ${GRIDDYN_DEPENDENCY_FLAGS} ${GRIDDYN_OPTION_FLAGS} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_DISABLE_FIND_PACKAGE_LAPACK=ON
          build_command: make
          branch_pattern: coverity_scan
      script: true
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-6 && CXX=g++-6"
        # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
        #   via the "travis encrypt" command using the project repo's public key
        - secure: "E0FTSviJ7BCcANQ4zAmxeGmRjQDontAqMRKi5k5T1z9fmJQ0sQLrsmPbehpWQaT8jDfn/mQU8CyPEoA3/tEchfV2oeE5b/xViQwQf+rAT3ni0HhMQKjYo33l1rjugyculcu3prMsj9502/Rshejxz2ANVjZMryyFTp1jC5UqCjBXDH33O4rnMD1xMysHi2cqULwatfgtal5xilIngvD9jLHh3B0RLVU1pDfrksLzJrCR85xVDg6BpduUgyCktjLD5+UnZmj8sxmkxpskLSoH9ULsPm3NKqunXGLLL8fUnamCdiD3dUPENhmCsWlNcZf5qbbTh5S1qF0ffeEfStYPfiFING0gAXIgBoNhDZhj0Sa1XP+ncByt9Ebg8h7KDTF4GVaTC25BXJLmz5hdTpz3SdqnbwoucrKECbgKZq2c57TOaqpW+DjpebFS032ZifdG15+SkyZwqgcu44XrMYuwsb6vG3Vu1SFnzK8ffeIyi/O97rBn2sbebvtdgn5CN6fJmOtjIBN1MfFxh1aOxRP+JUG4Jy4BQTVQUPWIDjvfnyg28OKxv6zMV2AvAtD7elyox6lyj5FvE+NImXZJoRJGHwN2Y81X+Kj4FNMczVhnQH00s/4fCUMTjzPzy0ehnhTIwYXhNmsBQQdrHuD2Xmb6oeMxXf2IKacPj65qq6K/SPQ="
    # XCode 8gm, OS X 10.11
    - <<: *osx_base
      env:
        - MATRIX_EVAL="COMPILER=clang && BUILD_TYPE=Release && TRAVIS_XCODE_VERSION=8"
        - HOMEBREW_NO_AUTO_UPDATE=1
      osx_image: xcode8

    - <<: *linux_base
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-6 && CXX=g++-6"
        - USE_MPI=mpich

    - <<: *linux_base
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-4.9 && CXX=g++-4.9"
        - CI_BOOST_VERSION=1.61.0

    - <<: *linux_base
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.5
          packages:
            - libstdc++-6-dev
            - clang-3.5
      env:
        - MATRIX_EVAL="COMPILER=clang && CC='clang-3.5' && CXX='clang++-3.5'"
        - CCACHE_CPP2=yes

   # ------------------------------------------------
   # Jobs for daily valgrind and code coverage tests
   # ------------------------------------------------
    - <<: *daily_linux
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-6 && CXX=g++-6"
        - RUN_VALGRIND=true
        - USE_MPI=mpich
    - <<: *daily_linux
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-6 && CXX=g++-6"
        - RUN_COVERAGE=true
        - USE_MPI=mpich
    - <<: *daily_linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC='gcc-5' && CXX='g++-5'"
        - USE_MPI=mpich
    - <<: *daily_linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0
          packages:
            - libstdc++-6-dev
            - clang-5.0
      env:
        - MATRIX_EVAL="COMPILER=clang && CC='clang-5.0' && CXX='clang++-5.0'"
        - CCACHE_CPP2=yes
        - CXX_STANDARD=17
        - USE_MPI=mpich

branches:
  except:
    - gh-pages

before_install:
  - 
  - eval "${MATRIX_EVAL}"
  - $CXX --version

install:
  - source scripts/install-ci-dependencies.sh

before_script:
  - mkdir -p build && cd build
  - export GRIDDYN_DEPENDENCY_FLAGS="-DBOOST_INSTALL_PATH=${CI_DEPENDENCY_DIR}/boost"
  - export GRIDDYN_OPTION_FLAGS="-DBUILD_RELEASE_ONLY=ON -DAUTOBUILD_KLU=ON -DBUILD_SHARED_FMI_LIBRARY=ON -DBUILD_GRIDDYN_SHARED_LIBRARY=ON"
  - if [[ "$USE_MPI" ]]; then GRIDDYN_OPTION_FLAGS+=" -DMPI_ENABLE=ON" ; fi
  - if [[ "$USE_MPI" ]]; then CC=${CI_DEPENDENCY_DIR}/mpi/bin/mpicc ; CXX=${CI_DEPENDENCY_DIR}/mpi/bin/mpic++ ; fi

script:
  - cmake .. ${GRIDDYN_DEPENDENCY_FLAGS} ${GRIDDYN_OPTION_FLAGS} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_DISABLE_FIND_PACKAGE_LAPACK=ON
  - make -j2

  # Run CI tests
  - ../scripts/run-ci-tests.sh

notifications:
    email: false

